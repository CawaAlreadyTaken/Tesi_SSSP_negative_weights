Teorema 1.1 (Obiettivo tesi):
Esiste un algoritmo LasVegas con tempo di esecuzione molto probabilmente O(m log^8(n) logW) per un grafo G_in con m archi e nodo sorgente s_in. O ritorna un albero di percorsi minimi da s_in, oppure ritorna un ciclo negativo.

__________________________________________________________________
Assunzione 2.1:
G_in = (V, E, w_in) ha le seguenti proprieta':
1) w_in(e) >= -1 per ogni e in E (quindi W_G_in = 2)
2) Ogni vertice in G_in ha out-degree costante

Lemma 2.2:
Se esiste un algoritmo che risolve l'obiettivo del Teorema 1.1 per un grafo G_in che soddisfa l'Assunzione 2.1 e ha tempo di esecuzione T(n, m), allora esiste un algoritmo che risolve l'obiettivo del Teorema 1.1 per ogni grafo di input G_in con pesi interi e ha tempo di esecuzione O(T(m, m) log(W_G_in)).

Dimostrazione lemma 2.2 e' data dallo "Scaling Framework" di Goldberg [Gol95].

Per dimostrare il Teorema 1.1 e' quindi sufficiente dimostrare che esista un algoritmo con gli obiettivi del Teorema 1.1 per un grafo che soddisfa l'Assunzione 2.1 e che abbia tempo di esecuzione T(m, m) = O(m log^8(n)).
Se si riesce a far questo, il lemma 2.2 porta poi a dimostrare che il Teorema 1.1 e' corretto.

__________________________________________________________________
Per far questo si usano due algoritmi principali:

Teorema 3.4 (SPmain):
Esiste un algoritmo SPmain(G_in, s_in) che prende come input un grafo G_in e un nodo sorgente s_in che rispettino l'Assunzione 2.1 e:
- Se l'algoritmo termina, restituisce in output un albero di percorsi minimi T da s_in con tempo di esecuzione atteso O(m log^5(n))
- Se il grafo G_in contiene un ciclo negativo, l'algoritmo non termina.

Teorema 3.5 (ScaleDown):
Esiste il seguente algoritmo ScaleDown(G=(V, E, w),delta,B):  # Attenzione, G qualsiasi, non deve rispettare Ass. 2.1
1) REQUISITI DELL' INPUT:
    (a) B intero positivo, w ritorna interi, w(e) >= -2B per ogni e in E
    (b) Se il grafo G non contiene un ciclo negativo allora la funzione (definita prima nel paper) eta(G^B) deve essere minore o uguale a delta. Significa che per ogni v in V esiste un percorso piu' breve s->v ha al massimo delta archi negativi.
    (c) Tutti i vertici in G hanno out-degree costante
2) OUTPUT: Se termina, l'algoritmo ritorna una funzione di costo (intera) phi tale che w_phi(e) >= -B per ogni e in E. (w_phi significa applicare la funzione di costo phi ai pesi degli archi (w), come definito sopra nel paper) 
3) TEMPO DI ESECUZIONE: Se G non contiene un ciclo negativo, allora l'algoritmo ha tempo di esecuzione atteso O(m log^3(n) log(delta)). Se invece contiene un ciclo negativo, non c'e' nessuna certezza che l'algoritmo termini. Se l'algoritmo termina, ritorna sempre l'output corretto.

Guardando questi due algoritmi principali, si puo' cominciare ad intuire come esista un fattore di log^8(n) nel tempo di esecuzione finale.
__________________________________________________________________


